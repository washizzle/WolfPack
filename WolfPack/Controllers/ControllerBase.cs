//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace WolfPack
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public abstract class WolvesControllerBase : Microsoft.AspNetCore.Mvc.Controller
    {
        /// <summary>removes a wolf by ID</summary>
        /// <param name="id">UUID of the wolf to get</param>
        /// <returns>Wolf removed</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("wolves/{id}", Name = "deleteWolfById")]
        public abstract System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteWolfById([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Guid id);
    
        /// <summary>updates a wolf by ID</summary>
        /// <param name="id">UUID of the wolf to get</param>
        /// <param name="body">Wolf to update</param>
        /// <returns>Wolf updated</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("wolves/{id}", Name = "updateWolfById")]
        public abstract System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> UpdateWolfById([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Guid id, [Microsoft.AspNetCore.Mvc.FromBody] Wolf body);
    
        /// <summary>lists wolves</summary>
        /// <param name="searchString">pass an optional search string for looking up a wolf</param>
        /// <param name="skip">number of records to skip for pagination</param>
        /// <param name="limit">maximum number of records to return</param>
        /// <returns>search results matching criteria</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("wolves", Name = "getWolves")]
        public abstract System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Wolf>>> GetWolves([Microsoft.AspNetCore.Mvc.FromQuery] string searchString, [Microsoft.AspNetCore.Mvc.FromQuery] int? skip, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit);
    
        /// <summary>adds a wolf</summary>
        /// <param name="body">Wolf to add</param>
        /// <returns>wolf created</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("wolves", Name = "addWolf")]
        public abstract System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Wolf>> AddWolf([Microsoft.AspNetCore.Mvc.FromBody] Wolf body);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public abstract class PacksControllerBase : Microsoft.AspNetCore.Mvc.Controller
    {
        /// <summary>removes a wolf from a pack</summary>
        /// <param name="packId">UUID of the pack to delete the wolf from</param>
        /// <param name="id">UUID of the wolf to delete from the pack</param>
        /// <returns>Wolf removed</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("packs/{packId}/wolves/{id}", Name = "deleteWolfFromPack")]
        public abstract System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteWolfFromPack([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Guid packId, [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Guid id);
    
        /// <summary>Adds a(n existing) wolf to a pack</summary>
        /// <param name="packId">uuid of the pack to add a wolf to</param>
        /// <param name="wolfId">uuid of the wolf</param>
        /// <returns>wolf added to pack</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packs/{packId}/wolves/{wolfId}", Name = "addWolfToPack")]
        public abstract System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> AddWolfToPack([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Guid packId, [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Guid wolfId);
    
        /// <summary>Creates a pack</summary>
        /// <param name="body">Pack to add</param>
        /// <returns>pack created</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("packs", Name = "addPack")]
        public abstract System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Pack>> AddPack([Microsoft.AspNetCore.Mvc.FromBody] Pack body);
    
        /// <summary>lists packs and wolves that are in them</summary>
        /// <param name="searchString">pass an optional search string for looking up a pack</param>
        /// <param name="skip">number of records to skip for pagination</param>
        /// <param name="limit">maximum number of records to return</param>
        /// <returns>search results matching criteria</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("packs", Name = "getPacks")]
        public abstract System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Pack>>> GetPacks([Microsoft.AspNetCore.Mvc.FromQuery] string searchString, [Microsoft.AspNetCore.Mvc.FromQuery] int? skip, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Wolf 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 3)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 3)]
        public string Gender { get; set; }
    
        [Newtonsoft.Json.JsonProperty("birthdate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Birthdate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GpsLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 3)]
        public string GpsLocation { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Pack 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 3)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("wolves", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Wolf> Wolves { get; set; }


    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108